version: "3.8"
services:

  generator:
    build: ./knapset-generator
    image: ghcr.io/peres-richard/knapset-generator
    container_name: generator
    environment:
      PORT: 3000
    expose:
      - 3000
    read_only: true
    cap_drop:
      - 'ALL'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/generator/health" ]
      interval: 90s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - generator
      - redpanda
    depends_on:
      - redpanda

  naive-solver:
    build: ./naive_solver
    image: ghcr.io/peres-richard/naive-solver
    container_name: naive-solver
    environment:
      PORT: 3000
    expose:
      - 3000
    read_only: false
    cap_drop:
      - 'ALL'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/naive-solver/health" ]
      interval: 90s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - naive-solver
      - redpanda
    depends_on:
      - redpanda

  average-solver:
    build: ./average_solver
    image: ghcr.io/peres-richard/average-solver
    container_name: average-solver
    expose:
      - 3000
    read_only: false
    cap_drop:
      - 'ALL'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/average-solver/health" ]
      interval: 90s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - average-solver
      - redpanda
    depends_on:
      - redpanda

  frontend:
    build: ./frontend
    image: ghcr.io/peres-richard/knapset-ui
    container_name: knapset-ui
    environment:
      PORT: 3000
    expose:
      - 3000
    read_only: false
    cap_drop:
      - 'ALL'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/" ]
      interval: 90s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - frontend

  nginx-proxy:
    image: nginx:1.23-alpine
    container_name: proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    user: nginx
    read_only: false
    cap_drop:
      - 'ALL'
    networks:
      - frontend
      - naive-solver
      - average-solver
      - generator
      - redpanda-console

  redpanda:
    container_name: redpanda
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.9
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
        # Use the internal addresses to connect to the Redpanda brokers from inside the same Docker network.
        # Use the external addresses to connect to the Redpanda brokers from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    volumes:
      - redpanda:/var/lib/redpanda/data
    networks:
      - redpanda
    healthcheck:
      test: [ "CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1" ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s

  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.3.1
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 8080:8080
    networks:
      - redpanda
      - redpanda-console
    depends_on:
      - redpanda

volumes:
  nginx-proxy:
  redpanda: null

networks:
  frontend:
  naive-solver:
  average-solver:
  generator:
  redpanda:
    driver: bridge
  redpanda-console:

